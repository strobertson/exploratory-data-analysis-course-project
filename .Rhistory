par(mfrow=c(1,1))
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green")
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green",
main= "Iris Violin Plot")
source('~/Example Iris Code.R', echo=TRUE)
# Make dataset avaliable for analysis and show us what we are dealing with
library(datasets, ggplot2)
str(iris)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4), main= "Iris Data Set")
qplot(Petal.Length, Sepal.Length, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Length")
library(datasets, ggplot2)
str(iris)
qplot(Petal.Width, Sepal.Width, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Width")
qplot(Petal.Length, Sepal.Length, data=iris, colour=Species, size=I(4), main= "Iris Data Set - Length")
subset(iris, Species == "setosa")[1:5,]
subset(iris, Species == "versicolor")[1:5,]
subset(iris, Species == "virginica")[1:5,]
subset(iris, Petal.Length < 2)[,"Species"]
summary(iris)
par(mar=c(7,5,1,1))
boxplot(iris,las=2)
irisVer <- subset(iris, Species == "versicolor")
irisSet <- subset(iris, Species == "setosa")
irisVir <- subset(iris, Species == "virginica")
par(mfrow=c(1,3),mar=c(6,3,2,1))
boxplot(irisVer[,1:4], main="Versicolor",ylim = c(0,8),las=2)
boxplot(irisSet[,1:4], main="Setosa",ylim = c(0,8),las=2)
boxplot(irisVir[,1:4], main="Virginica",ylim = c(0,8),las=2)
par(mfrow=c(1,1))
hist(iris$Petal.Length)
par(mfrow=c(1,3))
hist(irisVer$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisSet$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
hist(irisVir$Petal.Length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,40))
library(vioplot)
par(mfrow=c(1,1))
vioplot(iris$Sepal.Length,iris$Sepal.Width,iris$Petal.Length,iris$Petal.Width,
names=c("Sep.Len","Sep.Wid","Pet.Len","Pet.Wid"),
col="green")
corr <- cor(iris[,1:4])
round(corr,3)
pairs(iris[,1:4])
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
library(C50)
input <- iris[,1:4]
output <- iris[,5]
model1 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = TRUE,minCases=1))
plot(model1, main="C5.0 Decision Tree - Unpruned, min=1")
model2 <- C5.0(input, output, control = C5.0Control(noGlobalPruning = FALSE))
plot(model2, main="C5.0 Decision Tree - Pruned")
summary(model2)
predicted <- predict(model2, iris, type="class")
predicted
iris$predictedC501 <- predicted
iris[iris$Species != iris$predictedC501,]
source('~/Example Iris Code.R', echo=TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y ~ x | f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLables.R")
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price ~ carat | color * cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$pm25, region = "west"), col = "green")
hist(subset(pollution, region = "west"), col = "green")
hist((subset(pollution, region = "west"))$pm25, col = "green")
hist(subset(pollution, region = "west")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, waiting)
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title("Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
exit()
quit()
?swirl
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, data = airquality)
boxplot(Ozone ~ Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par)
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozonw in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == 5)
may <- subset(airquality, month == "5")
may <- subset(airquality, Month == "5")
may <- subset(airquality, Month == 5)
?points
with(may, points(Wind, Ozone, pch = 24, col = "blue")
)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other"))
legend("topright", pch = c(17,8), col = c("blue","red"), legend = c("May","Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
sample(colors(), 10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
ps(5)
p3(5)
plot(x = x, y = y, pch = 19, col = rgb(0,.5,.5))
plot(x = x, y = y, pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(x = displ, y = hwy, data = mpg)
qplot(x = displ, y = hwy, data = mpg, color = drv)
qplot(x = displ, y = hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(x = drv,y = hwy, data = mpg, geom = "boxplot")
qplot(x = drv,y = hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(x = hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(x = hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(x = displ, y = hwy, data = mpg, geom = c("point","smooth"), facets = . ~ drv)
g <- ggplot(mpg, aes(displ, mpg))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
geom_smooth(g + geom_point())
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, color = aes(drv))
g+geom_point(size = 4, alpha = 1/2, aes = color(drv))
g+geom_point(size = 4, alpha = 1/2, color = aes("drv"))
g+geom_point(size = 4, alpha = 1/2, color = aes(drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(size = 2, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, lty = 3, method = "lm", se = FALSE)
g+geom_point(size = 2, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(x = myx, y = myy, type = "l", ylim = c(-3,3))
g <- ggplot(data = testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(data = mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Milage", title = "Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(x = price, data = diamonds)
range(diamonds$price)
qplot(x = price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(x = price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(x = price, data = diamonds, geom = "density")
qplot(x = price, data = diamonds, geom = "density", color = cut)
qplot(x = carat, y = price, data = diamonds)
qplot(x = carat, y = price, data = diamonds, shape = cut)
qplot(x = carat, y = price, data = diamonds, color = cut)
qplot(x = carat, y = price, data = diamonds, color = cut, geom_smooth = "lm")
qplot(x = carat, y = price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(x = carat, y = price, data = diamonds, color = cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(data = diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamond[myd,]
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(data = diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=.4, col="red")
4
5
abline(h=.5)
12
abline(h=.05)
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red","orange","purple"), pch = 2, lwd = 2)
points(cx, cy, col = c("red","orange","purple"), pch = 2, cex = 2, lwd = 2)
points(cx, cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd =2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols2, pch = 9, cex = 2, lwd = 2)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd =3)
plot(x, y, col = kmean(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu * diag * t
matu %*% diag %*% t
matu %*% diag %*% matv
matu * diag * matv
matu %*% diag %*% matv
help
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[,1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[,1]) %*% svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[,1]) %*% svd1$v
help
a1 <- (svd1$u[,1] * svd1$d[,1]) %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showWY.R")
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd2 <- svd(scale(sub1[,-c(562:563)]))
svd1 <- svd(scale(sub1[,-c(562:563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
help()
help
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-(562:563)], centers = 6)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- table(kClust$cluster, sub1$activity, nstart = 100)
table(kClust$cluster, sub1$activity, nstart = 100)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
is.na(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(lwd = 2, h = median(x0sub, na.rm = TRUE))
plot(dates1, x1sub, pch = 20)
abline(lwd = 2, h = median(x1sub, na.rm = TRUE))
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(Sample.Value), na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
RColorBrewer::display.brewer.all()
?RColorBrewer
setwd("~/R Programming/Coursera/exploratory-data-analysis-course-project")
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot1.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot1.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot1.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot1.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
View(NEI)
?filter
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
?subset
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
View(NEI)
names(NEI)
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
source('~/R Programming/Coursera/exploratory-data-analysis-course-project/plot2.R')
View(emissionAggYear)
